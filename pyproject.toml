[tool.poetry]
name = "python-web-service-boilerplate"
version = "0.1.0"
description = "Python web service boilerplate using FastAPI"
authors = ["Johnny Miller <johnnysviva@outlook.com>"]
license = "Apache-2.0"
readme = "README.md"
keywords = ["python", "web service", "boilerplate"]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.dependencies]
python = ">=3.13.1,<3.14"
# Web Framework
fastapi = {extras = ["standard"], version = "==0.116.1"}
uvicorn = "==0.35.0"
# ORM
sqlalchemy = {extras = ["asyncio"], version = "==2.0.43"}
alembic = "==1.16.5"
psycopg = {extras = ["binary", "pool"], version = "==3.2.9"}
asyncpg = "==0.30.0"
orjson = "==3.11.3"
# Security
python-jose = {extras = ["cryptography"], version = "==3.5.0"}
passlib = {extras = ["bcrypt"], version = "==1.7.4"}
# Class
pydantic = "==2.11.7"
# Logging
loguru = "==0.7.3"
# Application Configuration
pyhocon = "==0.3.61"
# Statistics & Data
numpy = "==2.3.2"
pandas = "==2.3.2"
# Datetime
arrow = "==1.3.0"
tzlocal = "==5.3.1"
# Other
jinja2 = "==3.1.6"
faker = "==37.6.0"
python-stdnum = "==2.1"
tenacity = "==9.1.2"
matplotlib = "==3.10.6"
psutil = "==7.0.0"
apscheduler = "==3.11.0"
humanize = "==4.13.0"


[tool.poetry.group.dev.dependencies]
mypy = "==1.17.1"
sqlalchemy = {extras = ["mypy"], version = "==2.0.43"}
pre-commit = "==4.3.0"
pyinstrument = "==5.1.1"


[tool.poetry.group.linter.dependencies]
ruff = "==0.12.11"


[tool.poetry.group.test]
optional = true


[tool.poetry.group.test.dependencies]
pytest = "==8.4.1"
pytest-mock = "==3.14.1"
pytest-cov = "==6.0.0"
pytest-html = "==4.1.1"
pytest-xdist = "==3.8.0"
pytest-asyncio = "==1.1.0"
pytest-benchmark = "==5.1.0"
pytest-monitor = "==1.6.6"


[tool.mypy]
files = ["src", "tests"]
cache_dir = "./build/.mypy_cache"
ignore_missing_imports = true
# https://docs.pydantic.dev/latest/mypy_plugin/#configuring-the-plugin
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.pytest]
testpaths = ["tests", ]
cache_dir = "./build/.pytest_cache"


[tool.pytest.ini_options]
pythonpath = [
    "src"
]


[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `*arg`
    "BLE001", # Do not catch blind exception: `Exception`
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "D203", # One blank line before class docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line summary first line
    "D401", # First line of docstring should be in imperative mood
    "DTZ005", # `datetime.datetime.now()` called without a `tz` argument
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "PLR2004", # Magic value used in comparison, consider replacing `3` with a constant variable
    "PLW0603", # Using the global statement to update `times_for_debounce` is discouraged
    "PLR0913", # Too many arguments
    "COM812", # Trailing comma missing
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TC003", # Move standard library import `concurrent.futures.Future` into a type-checking block
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY201", # Use `raise` without specifying exception name
    "TC001", # Move application import `python_web_service_boilerplate.system.auth.schemas.AuthTokenResponse` into a type-checking block
]
line-length = 120
show-fixes = true
target-version = "py39"
src = ["src", "tests"]
exclude = ["**/alembic/**"]
respect-gitignore = true


[tool.ruff.lint.flake8-copyright]
author = "Johnny Miller"


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"


[tool.ruff.lint.mccabe]
max-complexity = 10


[tool.ruff.lint.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
"__init__.py" = ["F401", "F403", "F405", ]
"tests/*" = [
    "ANN",
    "ARG",
    "INP001",
    "S101",
]


[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

name: Python CI with Poetry

on:
  pull_request:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
    paths-ignore:
      - '**.md'
      - '_config.yml'
  # Scheduled workflows run on the latest commit on the default or base branch.
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  # Cron syntax has five fields separated by a space, and each field represents a unit of time.
  # ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
  # ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
  # ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the month (1 - 31)
  # ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12 or JAN-DEC)
  # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the week (0 - 6 or SUN-SAT)
  # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
  # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
  # ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
  # * * * * *
  schedule:
    # Schedule at 00:00 on Tuesday, Thursday, and Saturday, https://crontab.guru/#0_0_*_*_2,4,6
    - cron: '0 0 * * 2,4,6'

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/project-environment-setup
      - run: poetry run ruff check .
      - name: Install mypy types
        run: |
          yes | poetry run mypy --install-types \
          || test $? -eq 2 && echo "Installed mypy types successfully" \
          || echo "Failed to install mypy types"
      - run: poetry run mypy
      - name: Python Tests with pytest
        run: env LOG_LEVEL=INFO poetry run pytest --quiet --cov --cov-report term -n auto --benchmark-disable --dist=loadfile
      - name: Python Benchmark with pytest
        run: env LOG_LEVEL=ERROR poetry run pytest --capture=no --log-cli-level=ERROR -n 0 --benchmark-only
  fastapi-smoke-testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/project-environment-setup
      - name: Start FastAPI app
        run: |
          env OFFLINE_ENV=true poetry run alembic upgrade head && \
          env OFFLINE_ENV=true LOG_LEVEL=INFO poetry run fastapi run src/python_web_service_boilerplate/__main__.py --port 8000 &
          FASTAPI_PID=$!
          echo $FASTAPI_PID > fastapi.pid
          # Wait for FastAPI to be ready (max 30 seconds)
          echo "Waiting for FastAPI to start..."
          for i in {1..60}; do
            if curl -s -f GET http://localhost:8000/health > /dev/null 2>&1; then
              echo "FastAPI is ready after $i seconds"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "FastAPI failed to start within 60 seconds"
              exit 1
            fi
            sleep 1
          done
          USERNAME="stephon.treutelae_$(date +%Y%m%d%H%M%S)"
          curl -i -f -L -X POST 'http://localhost:8000/api/v1/users' \
            -H 'Content-Type: application/json' \
            --data-raw "{
              \"username\": \"$USERNAME\",
              \"password\": \"123456\",
              \"email\": \"Bethel43@hotmail.com\",
              \"full_name\": \"Stephon Treutel\"
            }" -o response.txt
      - name: Show response
        run: cat response.txt
      - name: Kill FastAPI
        run: |
          FASTAPI_PID=$(cat fastapi.pid)
          kill $FASTAPI_PID
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/project-environment-setup
      - name: Check Versions of Python Packages
        run: |
          output=$(poetry run pip list --outdated)
          if [ -z "$output" ]
          then
              echo "üéâ Congrats! Everything is up-to-date"
          else
              echo "‚ö†Ô∏è Attention! Outdated dependencies detected"
              echo "$output"
          fi
          echo "pyproject.toml"
          cat pyproject.toml
